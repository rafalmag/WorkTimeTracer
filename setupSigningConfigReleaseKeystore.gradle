import groovy.swing.SwingBuilder

// https://developer.android.com/studio/publish/app-signing.html#secure-shared-keystore
// https://developer.android.com/studio/publish/app-signing.html#gradle-sign
// http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle/19130098#19130098
task setupSigningConfigReleaseKeystore {
    doLast {
        println "setupKeystore"
        def keystoreProperties = new Properties()
        def keystorePropertiesFile = rootProject.file("keystore.properties")
        if (!keystorePropertiesFile.exists()) {
            throw new InvalidUserDataException("keystore.properties must be present in root directory")
        }
        def stream = new FileInputStream(keystorePropertiesFile)
        keystoreProperties.load(stream)
        stream.close()

        android.signingConfigs.release.storeFile = file(keystoreProperties['storeFile'])
        android.signingConfigs.release.keyAlias = keystoreProperties['keyAlias']
        android.signingConfigs.release.storePassword = getPassword("Project: " + project.name + ". Enter keystore password: ")
        android.signingConfigs.release.keyPassword = getPassword("Project: " + project.name + ". Enter key password: ")
    }
}

// based on https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
String getPassword(String passwordPrompt) {
    String pass = null
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                    title: 'Enter password', // Dialog passwordPrompt
                    alwaysOnTop: true,
                    resizable: false,
                    locationRelativeTo: null, // center of the screen
                    pack: true, // it will take the size of it's children
                    show: true
            ) {
                vbox {
                    label(text: passwordPrompt)
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        pass = new String(input.password) // Set pass variable to value of input field
                        dispose() // Close dialog
                    })
                }
            }
        }
    } else {
        pass = new String(System.console().readPassword("\n" + passwordPrompt))
    }
    pass
}

def isReleaseConfig = gradle.startParameter.taskNames.any {it.contains('Release') }
if (isReleaseConfig) {
    setupSigningConfigReleaseKeystore.execute()
}